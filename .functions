# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
    find . -name "$1"
}

# Move to trash
function trash () { command mv "$@" ~/.Trash ; }

# Extracts many things with just one word
function extract () {
  if [ -f "$1" ] ; then
    local filename=$(basename "$1")
    local foldername="${filename%%.*}"
    local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
    local didfolderexist=false
    if [ -d "$foldername" ]; then
      didfolderexist=true
      read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
      echo
      if [[ $REPLY =~ ^[Nn]$ ]]; then
        return
      fi
    fi
    mkdir -p "$foldername" && cd "$foldername"
    case $1 in
      *.tar.bz2)  tar xjf "$fullpath"     ;;
      *.tar.gz)   tar xzf "$fullpath"     ;;
      *.tar.xz)   tar Jxvf "$fullpath"    ;;
      *.tar.Z)    tar xzf "$fullpath"     ;;
      *.bz2)      bunzip2 "$fullpath"     ;;
      *.rar)      unrar e "$fullpath"     ;;
      *.gz)       gunzip "$fullpath"      ;;
      *.tar)      tar xf "$fullpath"      ;;
      *.taz)      tar xzf "$fullpath"     ;;
      *.tb2)      tar xjf "$fullpath"     ;;
      *.tbz)      tar xjf "$fullpath"     ;;
      *.tbz2)     tar xjf "$fullpath"     ;;
      *.tgz)      tar xzf "$fullpath"     ;;
      *.txz)      tar Jxvf "$fullpath"    ;;
      *.zip)      unzip "$fullpath"       ;;
      *.Z)        uncompress "$fullpath"  ;;
      *.7z)       7z x "$fullpath"        ;;
      *)          echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
function cpp () {
  rsync -WavP --human-readable --progress $1 $2
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
  if [ -t 0 ]; then # argument
    python -mjson.tool <<< "$*" | pygmentize -l javascript;
  else # pipe
    python -mjson.tool | pygmentize -l javascript;
  fi;
}

# Determine size of a file or total size of a directory
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$@" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* *;
  fi;
}

# Create a data URL from a file
function dataurl() {
  local mimeType=$(file -b --mime-type "$1");
  if [[ $mimeType == text/* ]]; then
    mimeType="${mimeType};charset=utf-8";
  fi
  echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Compare original and gzipped file size
function gz() {
  local origsize=$(wc -c < "$1");
  local gzipsize=$(gzip -c "$1" | wc -c);
  local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
  printf "orig: %d bytes\n" "$origsize";
  printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# All the dig info
function digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# UTF-8-encode a string of Unicode symbols
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
  # print a newline unless we’re piping the output to another program
  if [ -t 1 ]; then
    echo ""; # newline
  fi;
}

# `s` with no arguments opens the current directory in Sublime Text, otherwise
# opens the given location
function s() {
  if [ $# -eq 0 ]; then
    slt .;
  else
    slt "$@";
  fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
  if [ $# -eq 0 ]; then
    vim .;
  else
    vim "$@";
  fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Print a color test
function color-test () {
  echo -e "\033[0mNONE"
  echo -e "\033[0;30mBLACK\t\033[1;30mBLACK_BOLD"
  echo -e "\033[0;31mRED\t\033[1;31mRED_BOLD"
  echo -e "\033[0;32mGREEN\t\033[1;32mGREEN_BOLD"
  echo -e "\033[0;33mYELLOW\t\033[1;33mYELLOW_BOLD"
  echo -e "\033[0;34mBLUE\t\033[1;34mBLUE_BOLD"
  echo -e "\033[0;35mPURPLE\t\033[1;35mPURPLE_BOLD"
  echo -e "\033[0;36mCYAN\t\033[1;36mCYAN_BOLD"
  echo -e "\033[0;37mWHITE\t\033[1;37mWHITE_BOLD"
}