[alias]
	# Simple aliases
	st = status
	df = diff
	ci = commit
	co = checkout
	br = branch
	cp = cherry-pick
	# Pretty things
	ll = log --oneline --graph --color --all --decorate
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --
	# `git tar $number $file` exports every file `touched` during the last `$number` commits into a tar file named `$file`
	tar = !sh -c 'git diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT HEAD~$1 HEAD | xargs tar -rf $2' -
	# `git export $folder` exports the current commit into `$folder`, sans all git-related files.
	export = !sh -c 'mkdir -p "$1" && git archive master | tar -x -C "$1"' -
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	# Interactive rebase with the given number of latest commits
	ireb = "!r() { git rebase -i HEAD~$1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# List contributors with number of commits
	contribs = shortlog --summary --numbered

[core]
	excludesfile = ~/.gitignore
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

[color]
	ui = always

[color "branch"]
	current = magenta bold
	local = magenta
	remote = red
	upstream = red bold

[color "diff"]
	meta = yellow
	frag = magenta
	old = red bold
	new = green bold

[color "status"]
	added = green bold
	changed = yellow bold
	untracked = red

[diff]
	tool = diffmerge

[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"

[merge]
	log = true
	tool = diffmerge

[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
	trustExitCode = true

[push]
	default = simple