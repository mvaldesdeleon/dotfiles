if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color'
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color'
fi

if tput setaf 1 &> /dev/null; then
	tput sgr0
	BLACK=$(tput setaf 0)
	RED=$(tput setaf 1)
	GREEN=$(tput setaf 2)
	YELLOW=$(tput setaf 3)
	BLUE=$(tput setaf 4)
	PURPLE=$(tput setaf 5)
	CYAN=$(tput setaf 6)
	WHITE=$(tput setaf 7)
	BOLD=$(tput bold)
	RESET=$(tput sgr0)
else
	BLACK="\e[1;30m"
	RED="\e[1;31m"
	GREEN="\e[1;32m"
	YELLOW="\e[1;33m"
	BLUE="\e[1;34m"
	PURPLE="\e[1;35m"
	CYAN="\e[1;36m"
	WHITE="\e[1;37m"
	BOLD=""
	RESET="\e[m"
fi

function git_prompt() {
	local s='';
	local branchName='';
	local style='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check if we are ahead or behind our tracking branch (https://gist.github.com/HowlingMind/996093).
			git_status="$(git status 2> /dev/null)"
			remote_pattern="Your branch is (ahead|behind).*by ([[:digit:]]*) commit"

			if [[ ${git_status} =~ ${remote_pattern} ]]; then
				if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
					s+="▲${BASH_REMATCH[2]} ";
				else
					s+="▼${BASH_REMATCH[2]} ";
				fi
				style="${WHITE}";
			fi

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+="${GREEN}+";
				style="${GREEN}";
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+="${YELLOW}!";
				style="${YELLOW}";
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+="${RED}?";
				style="${RED}";
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+="${CYAN}$";
				style="${CYAN}";
			fi;

			# The number of commits ahead/behind ends with a trailing space. If no other indicator was added, it will be lingering at the end of `s`.
			s=$(echo "${s}" | sed 's/ *$//')

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s=" ${style}[${s}${style}]";

		echo "${WHITE} on ${PURPLE}${branchName}${s}";
	else
		return;
	fi;
}

# Only show username/host if not default
function usernamehost() {
	if [ $USER != "$DEFAULT_USERNAME" ]; then
		local user="$BOLD${CYAN}$USER";
		if [ $HOSTNAME != "$DEFAULT_HOSTNAME" ]; then echo "$BOLD${PURPLE}$HOSTNAME\\$user "; else echo "$user "; fi
	else
		if [ $HOSTNAME != "$DEFAULT_HOSTNAME" ]; then echo "$BOLD${PURPLE}$HOSTNAME "; fi
	fi
}

# iTerm Tab and Title Customization and prompt customization
# http://sage.ucsc.edu/xtal/iterm_tab_customization.html

PS1="\[\e]2;$PWD\[\a\]" # Put the string "/full/directory/path" in the title bar
PS1+="\[\e]1;\]$(basename "$(dirname "$PWD")")/\W\[\a\]" # Put the penultimate and current directory in the tab title
PS1+="\[$BOLD$BLUE\]\w" # Current directory
PS1+="\$(git_prompt)" # Git repo details
PS1+="\n"
PS1+="\$(usernamehost)" # Username and host, if relevant
PS1+="\[$BOLD$RED\]\$ \[$RESET\]" # The final prompt, and reset coloring
export PS1

PS2="\[${RED}\]→ \[${RESET}\]";
export PS2;